{"ast":null,"code":"import React from 'react';\nimport './App.css';\n\n// Object Typing\n// In JavaScript, an object can have any property. In TypeScript, you need to create a type alias for the object.\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet user = {\n  name: \"Alice\",\n  age: 25\n};\n\n// Intersection Types (&)\n\nfunction App() {\n  let x = 0; // x will be treated as a number.\n  // let x: number = 0; I explicitly stated that it will be a number.\n  // x = \"Hello\"; ❌ Error: string is not assignable to number\n\n  // When declaring a variable without a value, you must specify the type.\n  let flag; // Later, true/false can be assigned.\n\n  function doSomething1(x, y, z)\n  // In JavaScript, function parameters can be anything → it cannot catch errors. But in TypeScript, you have to specify the type.\n  {\n    console.log(x, y, z);\n    // x.toLowerCase();  ❌ Error (Because x is a number)\n    // y.toFixed(2);     ❌ Error (Because y is a string)\n  }\n  function doSomething2(userObject) {\n    let names = [\"Alice\", \"Bob\"];\n    // names[0] = \"Charlie\";  // ✅\n    // names[1] = 42;         ❌ Error: A number cannot be assigned.\n\n    // To create a multi-type array, you use Union.\n    let values = [\"Alice\", 42, \"Bob\"];\n\n    // Union Types (|)\n\n    let age;\n    // age = 25;        ✅\n    // age = \"Twenty\";  ✅\n    // age = true;      ❌ Error\n\n    let adminUser = {\n      name: \"Alice\",\n      age: 30,\n      isAdmin: true,\n      adminId: \"ADM001\"\n    };\n  }\n  ;\n\n  // doSomething1(10, \"Hello\", true); ✅ Right\n  // doSomething1(\"abc\", \"Hello\", true); ❌ Error\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","user","name","age","App","x","flag","doSomething1","y","z","console","log","doSomething2","userObject","names","values","adminUser","isAdmin","adminId","_c","$RefreshReg$"],"sources":["D:/React/my-app/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// Object Typing\n// In JavaScript, an object can have any property. In TypeScript, you need to create a type alias for the object.\ntype User = {\n  name: string;\n  age: number;\n  isAdmin?: boolean; // optional property\n};\n\nlet user: User = {\n  name: \"Alice\",\n  age: 25,\n};\n\n// Intersection Types (&)\ntype Admin = User & {\n  adminId: string;\n};\n\n\nfunction App() {\n  let x = 0;   // x will be treated as a number.\n  // let x: number = 0; I explicitly stated that it will be a number.\n  // x = \"Hello\"; ❌ Error: string is not assignable to number\n  \n  // When declaring a variable without a value, you must specify the type.\n  let flag: boolean; // Later, true/false can be assigned.\n\n  function doSomething1(x: number, y: string, z: boolean) // In JavaScript, function parameters can be anything → it cannot catch errors. But in TypeScript, you have to specify the type.\n  {\n  \n    console.log(x, y, z);\n    // x.toLowerCase();  ❌ Error (Because x is a number)\n    // y.toFixed(2);     ❌ Error (Because y is a string)\n\n  }\n\n  function doSomething2(userObject: User)\n  {\n    let names: string[] = [\"Alice\", \"Bob\"];\n    // names[0] = \"Charlie\";  // ✅\n    // names[1] = 42;         ❌ Error: A number cannot be assigned.\n\n    // To create a multi-type array, you use Union.\n    let values: (string | number)[] = [\"Alice\", 42, \"Bob\"];\n\n    // Union Types (|)\n\n    let age: number | string;\n    // age = 25;        ✅\n    // age = \"Twenty\";  ✅\n    // age = true;      ❌ Error\n\n    let adminUser: Admin = {\n    name: \"Alice\",\n    age: 30,\n    isAdmin: true,\n    adminId: \"ADM001\",\n    };\n\n\n\n};\n\n  // doSomething1(10, \"Hello\", true); ✅ Right\n  // doSomething1(\"abc\", \"Hello\", true); ❌ Error\n\n\n\n  return (\n\n    <>\n    \n    </>\n\n  )\n}\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;;AAElB;AACA;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAOA,IAAIC,IAAU,GAAG;EACfC,IAAI,EAAE,OAAO;EACbC,GAAG,EAAE;AACP,CAAC;;AAED;;AAMA,SAASC,GAAGA,CAAA,EAAG;EACb,IAAIC,CAAC,GAAG,CAAC,CAAC,CAAG;EACb;EACA;;EAEA;EACA,IAAIC,IAAa,CAAC,CAAC;;EAEnB,SAASC,YAAYA,CAACF,CAAS,EAAEG,CAAS,EAAEC,CAAU;EAAE;EACxD;IAEEC,OAAO,CAACC,GAAG,CAACN,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC;IACpB;IACA;EAEF;EAEA,SAASG,YAAYA,CAACC,UAAgB,EACtC;IACE,IAAIC,KAAe,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;IACtC;IACA;;IAEA;IACA,IAAIC,MAA2B,GAAG,CAAC,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC;;IAEtD;;IAEA,IAAIZ,GAAoB;IACxB;IACA;IACA;;IAEA,IAAIa,SAAgB,GAAG;MACvBd,IAAI,EAAE,OAAO;MACbC,GAAG,EAAE,EAAE;MACPc,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;IACT,CAAC;EAIL;EAAC;;EAEC;EACA;;EAIA,oBAEElB,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAGP;AAACqB,EAAA,GAxDQf,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}